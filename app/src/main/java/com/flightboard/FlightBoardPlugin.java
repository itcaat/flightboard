package com.flightboard;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import eu.decentsoftware.holograms.api.DHAPI;
import eu.decentsoftware.holograms.api.holograms.Hologram;
import org.bukkit.*;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class FlightBoardPlugin extends JavaPlugin implements CommandExecutor {
    private final OkHttpClient client = new OkHttpClient();
    private final Gson gson = new Gson();
    private static final String HOLOGRAM_NAME = "FlightBoard";

    @Override
    public void onEnable() {
        saveDefaultConfig();
        getCommand("reloadboard").setExecutor(this);
        Bukkit.getLogger().info("[FlightBoard] –ü–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω!");

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        updateHologram();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        new BukkitRunnable() {
            @Override
            public void run() {
                updateHologram();
            }
        }.runTaskTimer(this, 600L, 6000L);
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (command.getName().equalsIgnoreCase("reloadboard")) {
            if (!sender.hasPermission("flightboard.reload")) {
                sender.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!");
                return true;
            }

            sender.sendMessage(ChatColor.GREEN + "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≥—Ä–∞–º–º—ã...");
            updateHologram();
            sender.sendMessage(ChatColor.GREEN + "–ì–æ–ª–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
            return true;
        }
        return false;
    }

    private void updateHologram() {
        String apiUrl = getConfig().getString("api-url");
        Bukkit.getScheduler().runTaskAsynchronously(this, () -> {
            try {
                Request request = new Request.Builder().url(apiUrl).build();
                Response response = client.newCall(request).execute();
                if (!response.isSuccessful()) {
                    Bukkit.getLogger().warning("[FlightBoard] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API");
                    return;
                }

                String json = response.body().string();
                JsonArray flights = gson.fromJson(json, JsonArray.class);
                List<String> flightInfoList = parseFlights(flights);

                Bukkit.getScheduler().runTask(this, () -> createOrUpdateHologram(flightInfoList));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    private List<String> parseFlights(JsonArray flights) {
        List<String> flightInfoList = new ArrayList<>();
        flightInfoList.add(ChatColor.BLUE + "**–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Å—ã**");

        for (int i = 0; i < Math.min(flights.size(), 6); i++) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 6 —Ä–µ–π—Å–æ–≤
            JsonObject flight = flights.get(i).getAsJsonObject();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            String flightNumber = flight.get("OD_FLIGHT_NUMBER").getAsString();
            String destination = flight.get("OD_RAP_DESTINATION_NAME_RU").getAsString();
            String airline = flight.get("OD_RAL_NAME_RUS").getAsString();
            String aircraftType = flight.get("OD_RACT_ICAO_CODE").getAsString();
            String departureTime = flight.get("OD_STD").getAsString().split("T")[1].substring(0, 5); // HH:mm
            String status = ""; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            try {
                status = ChatColor. RED + flight.get("OD_STATUS_RU").getAsString().trim();
            } catch (UnsupportedOperationException e) {
                status = ChatColor.GREEN + "‚úÖ –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≥–æ–ª–æ–≥—Ä–∞–º–º—ã
            String line1 = ChatColor.YELLOW + "üïí " + departureTime + " | ‚úà " + flightNumber + " | " + ChatColor.AQUA
                    + destination;
            String line2 = ChatColor.GRAY + "üõ´ " + airline + " | " + ChatColor.GOLD + aircraftType + " | "
                    + status;

            flightInfoList.add(line1);
            flightInfoList.add(line2);
        }

        return flightInfoList;
    }

    private void createOrUpdateHologram(List<String> flightInfoList) {
        Location holoLocation = new Location(Bukkit.getWorld(getConfig().getString("hologram.world")),
                getConfig().getDouble("hologram.x"),
                getConfig().getDouble("hologram.y"),
                getConfig().getDouble("hologram.z"));

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≥–æ–ª–æ–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (DHAPI.getHologram(HOLOGRAM_NAME) != null) {
            DHAPI.removeHologram(HOLOGRAM_NAME);
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≥—Ä–∞–º–º—É
        Hologram hologram = DHAPI.createHologram(HOLOGRAM_NAME, holoLocation);
        DHAPI.setHologramLines(hologram, flightInfoList);
    }
}
