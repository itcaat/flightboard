package com.flightboard;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import eu.decentsoftware.holograms.api.DHAPI;
import eu.decentsoftware.holograms.api.holograms.Hologram;
import org.bukkit.*;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class FlightBoardPlugin extends JavaPlugin implements CommandExecutor {
    private final OkHttpClient client = new OkHttpClient();
    private final Gson gson = new Gson();
    private static final String HOLOGRAM_NAME = "FlightBoard";
    private FileConfiguration config;

    @Override
    public void onEnable() {
        saveDefaultConfig();
        reloadConfig();
        config = getConfig(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥

        if (getCommand("reloadboard") != null) {
            getCommand("reloadboard").setExecutor(this);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (!config.contains("api-url") || !config.contains("hologram.world") || 
            !config.contains("hologram.x") || !config.contains("hologram.y") || 
            !config.contains("hologram.z")) {
            getLogger().warning("[FlightBoard] –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.yml");
            return;
        }

        getLogger().info("[FlightBoard] –ü–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω!");
        getLogger().info("API URL: " + config.getString("api-url"));
        getLogger().info("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " + 
                config.getDouble("hologram.x") + ", " + 
                config.getDouble("hologram.y") + ", " + 
                config.getDouble("hologram.z"));

        long updateIntervalTicks = getConfig().getInt("hologram.update-interval") * 20L;
        getLogger().info("[FlightBoard] –ì–æ–ª–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ " + (updateIntervalTicks / 20) + " —Å–µ–∫—É–Ω–¥.");

        updateHologram();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
        new BukkitRunnable() {
            @Override
            public void run() {
                updateHologram();
            }
        }.runTaskTimer(this, 600L, updateIntervalTicks);
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (command.getName().equalsIgnoreCase("reloadboard")) {
            if (!sender.hasPermission("flightboard.reload")) {
                sender.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!");
                return true;
            }

            sender.sendMessage(ChatColor.GREEN + "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≥—Ä–∞–º–º—ã...");
            updateHologram();
            sender.sendMessage(ChatColor.GREEN + "–ì–æ–ª–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
            return true;
        }
        return false;
    }

    private void updateHologram() {
        String apiUrl = config.getString("api-url");
        Bukkit.getScheduler().runTaskAsynchronously(this, () -> {
            try {
                Request request = new Request.Builder().url(apiUrl).build();
                Response response = client.newCall(request).execute();
                if (!response.isSuccessful()) {
                    getLogger().warning("[FlightBoard] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: " + response.code());
                    return;
                }

                String json = response.body().string();
                JsonArray flights = gson.fromJson(json, JsonArray.class);
                List<String> flightInfoList = parseFlights(flights);

                Bukkit.getScheduler().runTask(this, () -> createOrUpdateHologram(flightInfoList));
            } catch (IOException e) {
                e.printStackTrace();
                getLogger().warning("[FlightBoard] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API!");
            }
        });
    }

    private List<String> parseFlights(JsonArray flights) {
        List<String> flightInfoList = new ArrayList<>();
        flightInfoList.add(ChatColor.BLUE + "***** –ê—ç—Ä–æ–ø–æ—Ä—Ç –ü—É–ª–∫–æ–≤–æ (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥) *****");
        flightInfoList.add(ChatColor.YELLOW + "** –¢–∞–±–ª–æ –≤—ã–ª–µ—Ç–∞ **");

        for (int i = 0; i < Math.min(flights.size(), 6); i++) {
            JsonObject flight = flights.get(i).getAsJsonObject();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            String flightNumber = flight.get("OD_FLIGHT_NUMBER").getAsString();
            String destination = flight.get("OD_RAP_DESTINATION_NAME_RU").getAsString();
            String airline = flight.get("OD_RAL_NAME_RUS").getAsString();
            String aircraftType = flight.get("OD_RACT_ICAO_CODE").getAsString();
            String departureTime = flight.get("OD_STD").getAsString().split("T")[1].substring(0, 5); // HH:mm

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            String status = "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (flight.has("OD_STATUS_RU") && flight.get("OD_STATUS_RU").isJsonPrimitive()) {
                status = flight.get("OD_STATUS_RU").getAsString().trim();
            }

            // –¶–≤–µ—Ç–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            ChatColor statusColor = status.equalsIgnoreCase("–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é") || status.equalsIgnoreCase("On Time")
                    ? ChatColor.GREEN // ‚úÖ –ó–µ–ª—ë–Ω—ã–π
                    : ChatColor.RED;   // ‚ùå –ö—Ä–∞—Å–Ω—ã–π

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≥–æ–ª–æ–≥—Ä–∞–º–º—ã
            String line1 = ChatColor.YELLOW + "üïí " + departureTime + " | ‚úà " + flightNumber + " | " + ChatColor.AQUA
                    + destination;
            String line2 = ChatColor.GRAY + "üõ´ " + airline + " | " + ChatColor.GOLD + aircraftType + " | "
                    + statusColor + status;

            flightInfoList.add(line1 + line2);
        }

        return flightInfoList;
    }

    private void createOrUpdateHologram(List<String> flightInfoList) {
        World world = Bukkit.getWorld(config.getString("hologram.world"));
        if (world == null) {
            getLogger().warning("[FlightBoard] –ú–∏—Ä '" + config.getString("hologram.world") + "' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        double x = config.getDouble("hologram.x");
        double y = config.getDouble("hologram.y");
        double z = config.getDouble("hologram.z");

        Location holoLocation = new Location(world, x, y, z);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≥–æ–ª–æ–≥—Ä–∞–º–º—É
        if (DHAPI.getHologram(HOLOGRAM_NAME) != null) {
            DHAPI.removeHologram(HOLOGRAM_NAME);
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≥—Ä–∞–º–º—É
        Hologram hologram = DHAPI.createHologram(HOLOGRAM_NAME, holoLocation);
        DHAPI.setHologramLines(hologram, flightInfoList);
    }
}
